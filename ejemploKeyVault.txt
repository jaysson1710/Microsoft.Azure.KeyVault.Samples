az keyvault create \
    --resource-group Learn-d67fb392-d4e8-4598-9189-f08495a9f1ac \
    --name <your-unique-vault-name>

az keyvault secret set \
    --name SecretPassword \
    --value "cadena conexion que cargaria en en inicio de la app" \
    --vault-name keyjason

Crea la aplicación

dotnet new webapi -o KeyVaultDemoApp
cd KeyVaultDemoApp
code .
dotnet add package Microsoft.Extensions.Configuration.AzureKeyVault -v 2.1.1
dotnet restore


program.cs

using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;

namespace KeyVaultDemoApp
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateWebHostBuilder(args).Build().Run();
        }

        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
            WebHost.CreateDefaultBuilder(args)
                .ConfigureAppConfiguration((context, config) =>
                {
                    // Build the current set of configuration to load values from
                    // JSON files and environment variables, including VaultName.
                    var builtConfig = config.Build();

                    // Use VaultName from the configuration to create the full vault URL.
                    var vaultUrl = $"https://{builtConfig["VaultName"]}.vault.azure.net/";

                    // Load all secrets from the vault into configuration. This will automatically
                    // authenticate to the vault using a managed identity. If a managed identity
                    // is not available, it will check if Visual Studio and/or the Azure CLI are
                    // installed locally and see if they are configured with credentials that can
                    // access the vault.
                    config.AddAzureKeyVault(vaultUrl);
                })
                .UseStartup<Startup>();
    }
}

using System;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;

namespace KeyVaultDemoApp.Controllers
{
    [Route("api/[controller]")]
    public class SecretTestController : ControllerBase
    {
        private readonly IConfiguration _configuration;

        public SecretTestController(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        [HttpGet]
        public IActionResult Get()
        {
            // Get the secret value from configuration. This can be done anywhere
            // we have access to IConfiguration. This does not call the Key Vault
            // API, because the secrets were loaded at startup.
            var secretName = "SecretPassword";
            var secretValue = _configuration[secretName];

            if (secretValue == null)
            {
                return StatusCode(
                    StatusCodes.Status500InternalServerError,
                    $"Error: No secret named {secretName} was found...");
            }
            else {
                return Content($"Secret value: {secretValue}" +
                    Environment.NewLine + Environment.NewLine +
                    "This is for testing only! Never output a secret " +
                    "to a response or anywhere else in a real app!");
            }
        }
    }
}


--establecer el secreto
az keyvault secret set \
 -n SecretPassword \
 --value "MI SECRETO VALOR" \
 --vault-name jayssonsecret

az appservice plan create \
    --name keyvault-exercise-plan \
    --sku FREE \
    --resource-group Learn-d67fb392-d4e8-4598-9189-f08495a9f1ac
A continuación, ejecute el siguiente comando para crear la aplicación web que utiliza el plan del Servicio de aplicaciones que acaba de crear:

az webapp create \
    --plan keyvault-exercise-plan \
    --resource-group Learn-d67fb392-d4e8-4598-9189-f08495a9f1ac \
    --name <your-unique-app-name>

--condifuracion de aplicacion para almacenar los identificador de baul
az webapp config appsettings set \
    --resource-group Learn-d67fb392-d4e8-4598-9189-f08495a9f1ac \
    --name appdemojaysson\
    --settings 'VaultName=jayssonsecret'


: "jayssonsecret",

"https://jayssonsecret.vault.azure.net/"

establecer permisos
az webapp identity assign \
    --resource-group Learn-d67fb392-d4e8-4598-9189-f08495a9f1ac \
    --name appdemojaysson

--publicacion

{
  "principalId": "b9216d06-ac40-4c02-b877-e63c82548b10",
  "tenantId": "604c1504-c6a3-4080-81aa-b33091104187",
  "type": "SystemAssigned",
  "userAssignedIdentities": null
}

az keyvault set-policy \
    --secret-permissions get list \
    --name "jayssonsecret" \
    --object-id "b9216d06-ac40-4c02-b877-e63c82548b10"

dotnet publish -o pub
zip -j site.zip pub/*

az webapp deployment source config-zip \
    --src site.zip \
    --resource-group Learn-d67fb392-d4e8-4598-9189-f08495a9f1ac \
    --name appdemojaysson

https://www.azuredevopslabs.com/labs/vstsextend/azurekeyvault/
creando identidad de servicio

jaysson@Azure:~$ az ad sp create-for-rbac -n ServicePrincipalNameJason
Changing "ServicePrincipalNameJason" to a valid URI of "http://ServicePrincipalNameJason", which is the required format used for service principal names
Creating a role assignment under the scope of "/subscriptions/d387d7c4-3dc1-4a04-b494-176559453375"
  Retrying role assignment creation: 1/36
{
  "appId": "14ba2b4f-8bb9-4dc9-b5bb-c57bfdf39fb7",
  "displayName": "ServicePrincipalNameJason",
  "name": "http://ServicePrincipalNameJason",
  "password": "b85a1eb6-ea04-493c-aa68-597fd1eb2b7c",
  "tenant": "7fbe498c-e540-4556-b198-7b2e16bff9b0"
}
jaysson@Azure:~$ ^C
jaysson@Azure:~$ az account show
{
  "environmentName": "AzureCloud",
  "id": "d387d7c4-3dc1-4a04-b494-176559453375",
  "isDefault": true,
  "name": "Visual Studio Enterprise",
  "state": "Enabled",
  "tenantId": "7fbe498c-e540-4556-b198-7b2e16bff9b0",
  "user": {
    "cloudShellID": true,
    "name": "javendanob@intergrupo.com",
    "type": "user"
  }
}
